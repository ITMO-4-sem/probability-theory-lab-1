{"version":3,"sources":["webpack:///./scss/index.scss?493a","webpack:///./components/InputsSequenceComponent/InputsSequenceComponent.ts","webpack:///./components/InputsSequenceComponent/ts/Key.ts","webpack:///./components/InputsSequenceComponent/ts/Mode.ts","webpack:///webpack/bootstrap","webpack:///webpack/runtime/define property getters","webpack:///webpack/runtime/hasOwnProperty shorthand","webpack:///webpack/runtime/make namespace object","webpack:///./ts/index.ts"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["// extracted by mini-css-extract-plugin\nexport {};","import { Mode } from './ts/Mode';\r\nimport { Key } from '@/components/InputsSequenceComponent/ts/Key';\r\nimport { InputsSequenceComponentResult } from '@/components/InputsSequenceComponent/ts/InputsSequenceComponentResult';\r\n\r\n\r\n/**\r\n * NumbersSequenceInputComponent. A component containing\r\n */\r\nexport class InputsSequenceComponent {\r\n\r\n    // initializers block\r\n    private static readonly initializer = {\r\n        defaultInput: function defaultInput(): HTMLInputElement {\r\n            const input = document.createElement('input') as HTMLInputElement;\r\n            input.required = true;\r\n            input.maxLength = 4;\r\n            input.step = 'any';\r\n            input.type = 'number';\r\n\r\n            return input;\r\n        }\r\n    };\r\n\r\n    public static readonly DEFAULT_INPUTS_SEQUENCE_CONTAINER_DOM_CLASS: string = 'inputs-sequence-container';\r\n    public static readonly DEFAULT_SWITCH_DOM_CLASS: string = 'switch';\r\n\r\n\r\n    public static readonly DEFAULT_INPUT: Readonly<HTMLInputElement> = InputsSequenceComponent.initializer.defaultInput(); //NumbersSequenceInputComponent.initializeInputDefault(); // initialization is\r\n    public static readonly DEFAULT_MODE = Mode.ADD;\r\n    public static readonly DEFAULT_INIT_INPUTS_NUMBER: number = 4;\r\n\r\n    public static readonly KEYS_TO_ADD_INPUT: ReadonlyArray<string> = new Array<Key>(\r\n        Key.Enter,\r\n    );\r\n\r\n    public static readonly KEYS_TO_DELETE_INPUT: ReadonlyArray<string> = new Array<Key>(\r\n        Key.Backspace,\r\n        Key.Space,\r\n    );\r\n\r\n\r\n    private readonly inputsSequenceContainerDOMClass: string = InputsSequenceComponent.DEFAULT_INPUTS_SEQUENCE_CONTAINER_DOM_CLASS;\r\n    private readonly switchDOMClass: string = InputsSequenceComponent.DEFAULT_SWITCH_DOM_CLASS;\r\n\r\n    private input: HTMLInputElement = InputsSequenceComponent.DEFAULT_INPUT;\r\n    private mode: Mode = InputsSequenceComponent.DEFAULT_MODE;\r\n    private readonly initInputsNumber = InputsSequenceComponent.DEFAULT_INIT_INPUTS_NUMBER;\r\n\r\n\r\n    private readonly elInputsSequenceContainer: HTMLDivElement;\r\n    private readonly elAddButton: HTMLButtonElement;\r\n    private readonly elInputs: HTMLDivElement;\r\n    private readonly elSwitch: HTMLElement;\r\n\r\n\r\n    private inputsList: Array<HTMLInputElement> = new Array<HTMLInputElement>();\r\n\r\n\r\n\r\n// onError\r\n// onWarn\r\n// setInputProps\r\n\r\n\r\n\r\n\r\n\r\n    constructor(args: {\r\n        input?: HTMLInputElement,\r\n        initInputsNumber?: number,\r\n        inputsSequenceContainerSelector?: string,\r\n        switchSelector?: string\r\n    }) {\r\n\r\n        const { input, initInputsNumber, inputsSequenceContainerSelector,  switchSelector } = args;\r\n\r\n        if ( inputsSequenceContainerSelector != undefined ) {\r\n            if ( inputsSequenceContainerSelector.length == 0 ) {\r\n                throw new Error('Inputs sequenceContainer selector must not be an empty' +\r\n                    ' string');\r\n            }\r\n\r\n            this.inputsSequenceContainerDOMClass = inputsSequenceContainerSelector;\r\n        }\r\n\r\n        if ( switchSelector != undefined ) {\r\n            if ( switchSelector.length == 0 ) {\r\n                throw new Error('Switch selector must not be an empty' +\r\n                    ' string');\r\n            }\r\n\r\n            this.switchDOMClass = switchSelector;\r\n        }\r\n\r\n        let isInputSpecified = false;\r\n\r\n        if ( input != undefined ) {\r\n            this.input = input;\r\n            isInputSpecified = true;\r\n        }\r\n\r\n        if ( initInputsNumber !== undefined ) {\r\n            if ( initInputsNumber < 0 ) {\r\n                throw new Error('Initial number of inputs can\\'t be below \"0\"');\r\n            }\r\n            this.initInputsNumber = initInputsNumber;\r\n        }\r\n\r\n\r\n        this.elInputsSequenceContainer = document.querySelector( '.' + this.inputsSequenceContainerDOMClass ) as HTMLDivElement;\r\n        this.elAddButton = document.querySelector( '.' + this.inputsSequenceContainerDOMClass + '__add-button' ) as HTMLButtonElement;\r\n        this.elInputs = document.querySelector( '.' + this.inputsSequenceContainerDOMClass + '__inputs' ) as HTMLDivElement;\r\n        this.elSwitch = document.querySelector( '.' + this.switchDOMClass ) as HTMLElement;\r\n\r\n        if (   this.elInputsSequenceContainer === null\r\n            || this.elAddButton === null\r\n            || this.elInputs === null\r\n            || this.elSwitch === null\r\n        ) {\r\n            throw Error( 'HTML document doesn\\'t contain elements with the specified' +\r\n                ' class names.' );\r\n        }\r\n\r\n        const existingInDOMInputs = this.findExistingInDOMInputs();\r\n\r\n        if ( isInputSpecified && existingInDOMInputs.length != 0 ) {\r\n            throw new Error('Constructor parameter \"input\" is specified and there are' +\r\n                ' existing \"input\" elements in DOM at the same time. Leave only one of' +\r\n                ' these options.');\r\n        }\r\n\r\n        if ( existingInDOMInputs.length != 0 ) {\r\n            this.input = existingInDOMInputs[0].cloneNode() as HTMLInputElement;\r\n            this.input.value = '';\r\n        }\r\n\r\n        for ( const input of existingInDOMInputs ) {\r\n            this.inputsList.push( input );\r\n        }\r\n\r\n        if ( this.initInputsNumber > existingInDOMInputs.length ) {\r\n            this.addSeveralInputs(this.initInputsNumber - existingInDOMInputs.length, true);\r\n        }\r\n\r\n        console.warn('inpList length = ', this.inputsList.length);\r\n\r\n        this.init(); // initialize them all ...\r\n\r\n    }\r\n\r\n\r\n    /**\r\n     * Main function for initialization.\r\n     *\r\n     */\r\n    private init(): void {\r\n\r\n        this.elInputs.addEventListener( 'keyup', (event: KeyboardEvent) => {\r\n\r\n            if ( ! (event.target instanceof HTMLInputElement) ) // Is this check\r\n                // necessary ?\r\n                return;\r\n\r\n            const input: HTMLInputElement = event.target as HTMLInputElement;\r\n\r\n            const pressedKey: string = event.code;\r\n\r\n            switch ( this.mode ) {\r\n                case ( Mode.ADD ): {\r\n                    if ( InputsSequenceComponent.KEYS_TO_ADD_INPUT.includes( pressedKey ) ) {\r\n                        if ( input === this.getLastInput() && this.areAllInputsFilledCorrectly()) {\r\n                                this.addInput(true);\r\n                        } else {\r\n                            const nextInput = this.getNextInput( input );\r\n                            if ( nextInput ) {\r\n                                nextInput.focus();\r\n                            }\r\n                        }\r\n                    }\r\n                    break;\r\n                }\r\n                case ( Mode.DELETE ): {\r\n\r\n                    if ( InputsSequenceComponent.KEYS_TO_DELETE_INPUT.includes( pressedKey ) ) {\r\n                        const prevInput = this.getPrevInput( input );\r\n                        this.deleteInput( event.target );\r\n                        if ( prevInput ) {\r\n                            prevInput.focus();\r\n                        }\r\n                    }\r\n                    break;\r\n                }\r\n                default: {\r\n                    throw new Error('Unchecked Mode is used.');\r\n                }\r\n            }\r\n        });\r\n\r\n\r\n        this.elAddButton.addEventListener( 'click', () => {\r\n            switch ( this.mode ) {\r\n                case (Mode.ADD): {\r\n                    if ( this.areAllInputsFilledCorrectly() ) {\r\n                        this.addInput( true );\r\n                    }\r\n                }\r\n            }\r\n        });\r\n\r\n\r\n        this.elSwitch.addEventListener( 'change', () => {\r\n            console.warn('mr Switch is clicked');\r\n\r\n            switch ( this.mode ) {\r\n                case ( Mode.ADD ): {\r\n                    this.setMode( Mode.DELETE );\r\n                    break;\r\n                }\r\n                case ( Mode.DELETE ): {\r\n                    this.setMode( Mode.ADD );\r\n                    break;\r\n                }\r\n                default: {\r\n                    throw Error('Undefined \"mode\" is used');\r\n                }\r\n            }\r\n\r\n            console.warn('new Mode = ', this.mode);\r\n        });\r\n    }\r\n\r\n    private findExistingInDOMInputs(): Array<HTMLInputElement> {\r\n        const existingInputs = new Array<HTMLInputElement>();\r\n\r\n        for ( const child of this.elInputs.children ) {\r\n            if ( child instanceof HTMLInputElement ) {\r\n                existingInputs.push( child );\r\n            }\r\n        }\r\n        return existingInputs;\r\n    }\r\n\r\n\r\n    private areAllInputsFilledCorrectly(): boolean {\r\n\r\n        for ( const input of this.inputsList ) {\r\n            if ( ! input.checkValidity() ) {\r\n                input.reportValidity();\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n\r\n    /**\r\n     * Adds \"input\" to the end of {@link elInputs}.\r\n     */\r\n    public addInput(setFocus?: boolean): void {\r\n        const newInput = this.input.cloneNode() as HTMLInputElement;\r\n        this.elInputs.append( newInput );\r\n        this.inputsList.push( newInput );\r\n\r\n        if ( setFocus ) {\r\n            newInput.focus();\r\n        }\r\n\r\n    }\r\n\r\n    public addSeveralInputs( numOfInputs: number, setFocus?: boolean ) {\r\n        if ( numOfInputs < 0 ) {\r\n            throw new Error('Number of inputs isn\\'t allowed to be below \"0\"');\r\n        }\r\n        for ( let i = 0; i < numOfInputs - 1; i++ ) { // -1 for setting focus for the\r\n            // last input\r\n            this.addInput( false );\r\n        }\r\n\r\n        this.addInput( setFocus );\r\n    }\r\n\r\n\r\n    /**\r\n     * Deletes input from DOM.\r\n     * @param {HTMLInputElement} input to delete.\r\n     * @private\r\n     */\r\n    private deleteInput(input: HTMLInputElement): void {\r\n        const index = this.inputsList.indexOf(input);\r\n\r\n        if ( index === -1 ) {\r\n            throw new Error('The specified \"input\" not found.');\r\n        }\r\n\r\n        input.remove();\r\n        this.inputsList.splice( this.inputsList.indexOf(input), 1);\r\n    }\r\n\r\n\r\n    /**\r\n     * Returns the last \"input\" element in the {@link elInputs} or \"underfined\"\r\n     * if it wasn't found.\r\n     * @param {HTMLCollection} collection\r\n     * @returns {HTMLInputElement | undefined}\r\n     */\r\n    private getLastInput(): HTMLInputElement | undefined {\r\n        return this.inputsList.length != 0 ? this.inputsList[this.inputsList.length - 1] : undefined;\r\n    }\r\n\r\n\r\n    private getNextInput( input: HTMLInputElement ) {\r\n        const index = this.inputsList.indexOf( input );\r\n        if ( index == -1 || index == this.inputsList.length - 1 ) {\r\n            return undefined;\r\n        }\r\n        return this.inputsList[index + 1];\r\n    }\r\n\r\n\r\n    private getPrevInput( input: HTMLInputElement ) {\r\n        const index = this.inputsList.indexOf( input );\r\n        if ( index == -1 || index == 0 ) {\r\n            return undefined;\r\n        }\r\n        return this.inputsList[index - 1];\r\n    }\r\n\r\n\r\n\r\n    /**\r\n     * Deletes all inputs from \"inputsSequenceContainer\".\r\n     * \"non-input\" elements aren't affected.\r\n     */\r\n    public deleteAllInputs(): void {\r\n\r\n        for ( const input of this.inputsList ) {\r\n            input.remove();\r\n        }\r\n\r\n        this.inputsList = new Array<HTMLInputElement>();\r\n    }\r\n\r\n    private setMode( mode: Mode ) {\r\n        this.setModeDOM( mode );\r\n        this.mode = mode;\r\n    }\r\n\r\n\r\n    private setModeDOM( mode: Mode, prevMode?: Mode ) {\r\n        console.warn('first mode = ', this.inputsSequenceContainerDOMClass + this.mode);\r\n        this.elInputsSequenceContainer.classList.remove( prevMode ? this.inputsSequenceContainerDOMClass + prevMode : this.inputsSequenceContainerDOMClass + this.mode );\r\n        this.elInputsSequenceContainer.classList.add( this.inputsSequenceContainerDOMClass + mode );\r\n    }\r\n\r\n\r\n    // /**\r\n    //  * @deprecated\r\n    //  * Deletes all inputs from \"numSeqInputBlock\" just like\r\n    //  * {@link deleteAllInputs} method but add a single new one. The only input\r\n    //  * is not being undeleted but added, so it's cleared.\r\n    //  */\r\n    // public deleteAllInputsButOne(): void {\r\n    //     this.deleteAllInputs();\r\n    //     this.addInput();\r\n    // }\r\n\r\n    // /**\r\n    //  * @deprecated\r\n    //  * @param input\r\n    //  * @see deleteAllInputs\r\n    //  * @see deleteAllInputsButOne\r\n    //  */\r\n    // public setInput(input: HTMLInputElement): void {\r\n    //     for ( const child of this.numSeqInputBlock.children ) {\r\n    //         if ( child instanceof HTMLInputElement )\r\n    //             throw Error( 'numSeqInputBlock contains inputs. You need to delete them at first.' );\r\n    //     }\r\n    //     this.input = input;\r\n    //\r\n\r\n\r\n\r\n\r\n    public getValues(): InputsSequenceComponentResult { // todo\r\n        const values: Array<any> = new Array<any>();\r\n\r\n        for ( const input of this.inputsList ) {\r\n            values.push( input.value );\r\n        }\r\n\r\n        return {\r\n            areAllInputsFilledCorrectly: this.areAllInputsFilledCorrectly(),\r\n            values: values\r\n        };\r\n    }\r\n\r\n\r\n\r\n}","export enum Key {\r\n    Enter = 'Enter',\r\n    Space = 'Space',\r\n    Backspace = 'Backspace',\r\n    Delete = 'Delete',\r\n    ArrowRight = 'ArrowRight',\r\n    ArrowLeft = 'ArrowRight'\r\n}","export enum Mode {\r\n    DELETE= '--mode-delete',\r\n    ADD = '--mode-add',\r\n}","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import '@scss/index.scss'; // is necessary for connecting styles to index.html\r\n\r\nimport { InputsSequenceComponent } from '@/components/InputsSequenceComponent/InputsSequenceComponent';\r\n\r\nconst inputsSequenceComponent = new InputsSequenceComponent({initInputsNumber: 1});\r\n\r\n\r\n\r\n// eslint-disable-next-line @typescript-eslint/ban-ts-comment\r\n// @ts-ignore\r\nwindow.inputsSequenceComponent = inputsSequenceComponent;"],"sourceRoot":""}